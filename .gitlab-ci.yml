# image: docker:19.03.1
# stages:
#   - test
#   - build
#   - staging
#   - deploy

# services:
#   - docker:19.03.1-dind

# variables:
#   DOCKER_DRIVER: overlay
#   npm_config_cache: "$CI_PROJECT_DIR/.npm"

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#   - .npm
#   - node_modules

# unit_tests:
#   stage: test
#   image: node:13.6.0-alpine
#   before_script:
#     - NODE_ENV=development npm ci
#   script:
#     - npm t
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master"'
#       when: on_success

# build_api_image:
#   stage: build
#   variables:
#     # Insecure mode is ok because we are just caching dependancies
#     DOCKER_TLS_CERTDIR: ""
#     DOCKER_HOST: tcp://docker:2375
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:latest || true
#     - docker pull $CI_REGISTRY_IMAGE/cache:latest || true
#     - docker build -t $IMAGE_NAME --build-arg NODE_ENV=$NODE_ENV --cache-from $CI_REGISTRY_IMAGE/cache:latest --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
#     - docker images --filter "label=cache=true" --format '{{.CreatedAt}}\t{{.ID}}' | sort -nr | head -n 1 | cut -f2 | (read intermediateCacheArtifact; docker tag $intermediateCacheArtifact $CI_REGISTRY_IMAGE/cache:latest)
#     - docker push $CI_REGISTRY_IMAGE/cache:latest
#     - docker push $CI_REGISTRY_IMAGE:latest
#     - mkdir images
#     - docker save $IMAGE_NAME > images/$IMAGE_NAME.tar
#   artifacts:
#     paths:
#       - images
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master"'
#       when: on_success

# deploy_staging:
#   stage: staging
#   before_script:
#     - apk add --update make ca-certificates openssl python curl
#     - update-ca-certificates
#     - echo $GCLOUD_STAGING_SERVICE_KEY > ~/gcloud-service-key.json
#     - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
#     - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
#     - export PATH=google-cloud-sdk/bin/:$PATH
#     - gcloud components update --quiet
#     - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
#     - gcloud components install beta --quiet
#     - gcloud config set project $GCLOUD_STAGING_PROJECT_ID
#     - gcloud beta config set run/platform managed
#     - gcloud beta config set run/region us-central1
#     - docker login -u _json_key --password-stdin https://gcr.io < ~/gcloud-service-key.json
#   script:
#     - docker load -i images/$IMAGE_NAME.tar
#     - docker tag $IMAGE_NAME "gcr.io/$GCLOUD_STAGING_PROJECT_ID/$IMAGE_NAME:staging"
#     - docker push "gcr.io/$GCLOUD_STAGING_PROJECT_ID/$IMAGE_NAME:staging"
#     - gcloud beta run deploy $STAGING_SERVICE_NAME --image "gcr.io/$GCLOUD_STAGING_PROJECT_ID/$IMAGE_NAME:staging" --async --quiet
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master"'
#       when: on_success

# trigger_e2e:
#   stage: deploy
#   script:
#     - apk add --update curl
#     - curl -X POST -F token=$E2E_PIPELINE_TRIGGER_TOKEN -F ref=master -F "variables[IMAGE_NAME]=$IMAGE_NAME" -F "variables[PRODUCTION_SERVICE_NAME]=$PRODUCTION_SERVICE_NAME" -F "variables[GCLOUD_PROJECT_ID]=$GCLOUD_PROJECT_ID" https://gitlab.com/api/v4/projects/16428761/trigger/pipeline
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master"'
#       when: on_success
